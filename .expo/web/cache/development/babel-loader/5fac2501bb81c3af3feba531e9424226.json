{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/adrianbacherer/Desktop/WilyApp/AutoPopulateTextInput/screens/SearchScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport db from \"../config\";\n\nvar Searchscreen = function (_React$Component) {\n  _inherits(Searchscreen, _React$Component);\n\n  var _super = _createSuper(Searchscreen);\n\n  function Searchscreen() {\n    var _this;\n\n    _classCallCheck(this, Searchscreen);\n\n    _this = _super.call(this);\n\n    _this.componentDidMount = function _callee() {\n      var Query;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(db.collection('Transaction').get());\n\n            case 2:\n              Query = _context.sent;\n              Query.docs.map(function (doc) {\n                _this.setState({\n                  AllTransactions: [].concat(_toConsumableArray(_this.state.AllTransactions), [doc.data()])\n                });\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      AllTransactions: []\n    };\n    return _this;\n  }\n\n  _createClass(Searchscreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(FlatList, {\n        data: this.state.AllTransactions,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          React.createElement(View, {\n            style: {\n              borderBottomWidth: 2\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 11\n            }\n          }, React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 13\n            }\n          }, 'BookID:' + item.BookID), React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 13\n            }\n          }, 'StudentID:' + item.StudentID), React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 13\n            }\n          }, 'Date:' + item.date.twdate()));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 9\n        }\n      });\n    }\n  }]);\n\n  return Searchscreen;\n}(React.Component);\n\nexport { Searchscreen as default };","map":{"version":3,"sources":["/Users/adrianbacherer/Desktop/WilyApp/AutoPopulateTextInput/screens/SearchScreen.js"],"names":["React","db","Searchscreen","componentDidMount","collection","get","Query","docs","map","doc","setState","AllTransactions","state","data","item","borderBottomWidth","BookID","StudentID","date","twdate","Component"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAGA,OAAOC,EAAP;;IAEqBC,Y;;;;;AACpB,0BAAa;AAAA;;AAAA;;AACX;;AADW,UAObC,iBAPa,GAOO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACCF,EAAE,CAACG,UAAH,CAAc,aAAd,EAA6BC,GAA7B,EADD;;AAAA;AACbC,cAAAA,KADa;AAEnBA,cAAAA,KAAK,CAACC,IAAN,CAAWC,GAAX,CAAe,UAACC,GAAD,EAAO;AACrB,sBAAKC,QAAL,CAAc;AACZC,kBAAAA,eAAe,+BAAK,MAAKC,KAAL,CAAWD,eAAhB,IAAgCF,GAAG,CAACI,IAAJ,EAAhC;AADH,iBAAd;AAGA,eAJD;;AAFmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAPP;;AAEX,UAAKD,KAAL,GAAW;AACTD,MAAAA,eAAe,EAAC;AADP,KAAX;AAFW;AAKZ;;;;WAWE,kBAAS;AACP,aACE,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAE,KAAKC,KAAL,CAAWD,eAA3B;AACA,QAAA,UAAU,EAAE,0BAAU;AAAA,cAARG,IAAQ,QAARA,IAAQ;AACpB,8BAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAACC,cAAAA,iBAAiB,EAAC;AAAnB,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAO,YAAUD,IAAI,CAACE,MAAtB,CADF,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAO,eAAaF,IAAI,CAACG,SAAzB,CAFF,EAGE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAO,UAAQH,IAAI,CAACI,IAAL,CAAUC,MAAV,EAAf,CAHF;AAKD,SAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAUD;;;;EA5BqCnB,KAAK,CAACoB,S;;SAA3BlB,Y","sourcesContent":["import React from 'react';\nimport { Text, View, StyleSheet, FlatList, TouchableOpacity } from 'react-native';\n\nimport db from '../config'\n\nexport default class Searchscreen extends React.Component {\n constructor(){\n   super()\n   this.state={\n     AllTransactions:[],\n   }\n }\n\n componentDidMount = async()=>{\n  const Query = await db.collection('Transaction').get()\n  Query.docs.map((doc)=>{\n   this.setState({\n     AllTransactions:[...this.state.AllTransactions,doc.data()]\n   })\n  })\n }\n\n    render() {\n      return (\n        <FlatList data={this.state.AllTransactions}\n        renderItem={({item})=>{\n          <View style={{borderBottomWidth:2}}>\n            <Text>{'BookID:'+item.BookID}</Text>\n            <Text>{'StudentID:'+item.StudentID}</Text>\n            <Text>{'Date:'+item.date.twdate()}</Text>\n          </View>\n        }}/>\n      );\n    }\n  }"]},"metadata":{},"sourceType":"module"}